/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Market, MarketInterface } from "../Market";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract IERC20",
        name: "_xToken",
        type: "address",
      },
      {
        internalType: "contract IERC20",
        name: "_yToken",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "Supply",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "Trade",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_xAmount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_yAmount",
        type: "uint256",
      },
    ],
    name: "supply",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_xAmount",
        type: "uint256",
      },
    ],
    name: "trade",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "xToken",
    outputs: [
      {
        internalType: "contract IERC20",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "yToken",
    outputs: [
      {
        internalType: "contract IERC20",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x60806040523480156200001157600080fd5b5060405162000f6e38038062000f6e8339818101604052810190620000379190620000d7565b816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050506200017a565b600081519050620000d18162000160565b92915050565b60008060408385031215620000eb57600080fd5b6000620000fb85828601620000c0565b92505060206200010e85828601620000c0565b9150509250929050565b6000620001258262000140565b9050919050565b6000620001398262000118565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6200016b816200012c565b81146200017757600080fd5b50565b610de4806200018a6000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c8063088b699e1461005157806349bfcca11461006f578063daecfa6c1461008d578063df1dd826146100a9575b600080fd5b6100596100c5565b6040516100669190610a4b565b60405180910390f35b6100776100e9565b6040516100849190610a4b565b60405180910390f35b6100a760048036038101906100a291906108db565b61010f565b005b6100c360048036038101906100be9190610889565b6104d5565b005b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008211801561011f5750600081115b61015e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161015590610a66565b60405180910390fd5b8160008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b81526004016101b891906109d0565b60206040518083038186803b1580156101d057600080fd5b505afa1580156101e4573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061020891906108b2565b1015610249576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161024090610a86565b60405180910390fd5b80600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b81526004016102a591906109d0565b60206040518083038186803b1580156102bd57600080fd5b505afa1580156102d1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102f591906108b2565b1015610336576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161032d90610aa6565b60405180910390fd5b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330856040518463ffffffff1660e01b8152600401610393939291906109eb565b602060405180830381600087803b1580156103ad57600080fd5b505af11580156103c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103e59190610860565b50600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330846040518463ffffffff1660e01b8152600401610445939291906109eb565b602060405180830381600087803b15801561045f57600080fd5b505af1158015610473573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104979190610860565b507f5e2aa66efd74cce82b21852e317e5490d9ecc9e6bb953ae24d90851258cc2f5c82826040516104c9929190610b01565b60405180910390a15050565b60008111610518576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161050f90610ac6565b60405180910390fd5b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161057491906109d0565b60206040518083038186803b15801561058c57600080fd5b505afa1580156105a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105c491906108b2565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161061f91906109d0565b60206040518083038186803b15801561063757600080fd5b505afa15801561064b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061066f91906108b2565b8361067a9190610b6c565b6106849190610b3b565b905060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330856040518463ffffffff1660e01b81526004016106e3939291906109eb565b602060405180830381600087803b1580156106fd57600080fd5b505af1158015610711573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107359190610860565b50600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b8152600401610793929190610a22565b602060405180830381600087803b1580156107ad57600080fd5b505af11580156107c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107e59190610860565b507f6badf30381ff2dc53789e35cf0a804727de8b0f5a08600e8c78d903a42e7efd1826040516108159190610ae6565b60405180910390a15050565b60008151905061083081610d80565b92915050565b60008135905061084581610d97565b92915050565b60008151905061085a81610d97565b92915050565b60006020828403121561087257600080fd5b600061088084828501610821565b91505092915050565b60006020828403121561089b57600080fd5b60006108a984828501610836565b91505092915050565b6000602082840312156108c457600080fd5b60006108d28482850161084b565b91505092915050565b600080604083850312156108ee57600080fd5b60006108fc85828601610836565b925050602061090d85828601610836565b9150509250929050565b61092081610bc6565b82525050565b61092f81610c0e565b82525050565b6000610942601783610b2a565b915061094d82610c90565b602082019050919050565b6000610965603383610b2a565b915061097082610cb9565b604082019050919050565b6000610988603383610b2a565b915061099382610d08565b604082019050919050565b60006109ab600b83610b2a565b91506109b682610d57565b602082019050919050565b6109ca81610c04565b82525050565b60006020820190506109e56000830184610917565b92915050565b6000606082019050610a006000830186610917565b610a0d6020830185610917565b610a1a60408301846109c1565b949350505050565b6000604082019050610a376000830185610917565b610a4460208301846109c1565b9392505050565b6000602082019050610a606000830184610926565b92915050565b60006020820190508181036000830152610a7f81610935565b9050919050565b60006020820190508181036000830152610a9f81610958565b9050919050565b60006020820190508181036000830152610abf8161097b565b9050919050565b60006020820190508181036000830152610adf8161099e565b9050919050565b6000602082019050610afb60008301846109c1565b92915050565b6000604082019050610b1660008301856109c1565b610b2360208301846109c1565b9392505050565b600082825260208201905092915050565b6000610b4682610c04565b9150610b5183610c04565b925082610b6157610b60610c61565b5b828204905092915050565b6000610b7782610c04565b9150610b8283610c04565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610bbb57610bba610c32565b5b828202905092915050565b6000610bd182610be4565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000610c1982610c20565b9050919050565b6000610c2b82610be4565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f78416d6f756e74206f722079416d6f756e742069732030000000000000000000600082015250565b7f78416d6f756e742069732067726561746572207468616e20617661696c61626c60008201527f652062616c616e6365206f662073656e64657200000000000000000000000000602082015250565b7f79416d6f756e742069732067726561746572207468616e20617661696c61626c60008201527f652062616c616e6365206f662073656e64657200000000000000000000000000602082015250565b7f616d6f756e742069732030000000000000000000000000000000000000000000600082015250565b610d8981610bd8565b8114610d9457600080fd5b50565b610da081610c04565b8114610dab57600080fd5b5056fea26469706673582212207e1af700e128b567f0297479880a5c75d1352aff9de229365e65b7d9e71df31e64736f6c63430008040033";

export class Market__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    _xToken: string,
    _yToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Market> {
    return super.deploy(_xToken, _yToken, overrides || {}) as Promise<Market>;
  }
  getDeployTransaction(
    _xToken: string,
    _yToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_xToken, _yToken, overrides || {});
  }
  attach(address: string): Market {
    return super.attach(address) as Market;
  }
  connect(signer: Signer): Market__factory {
    return super.connect(signer) as Market__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MarketInterface {
    return new utils.Interface(_abi) as MarketInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Market {
    return new Contract(address, _abi, signerOrProvider) as Market;
  }
}
